#!/usr/bin/perl
use warnings;
use strict;
use Encode;
use Getopt::Long;
use File::Basename;
use List::Util qw(min max);

$| = 1;

my $SELF_CMD = $0;

my %options = (
	# common
	device			=> "siemens-el71",
	fullflash		=> "./ff.bin",
	rw				=> 0,
	help			=> 0,
	
	# OTP
	flash_otp0		=> undef,
	flash_otp1		=> undef,
	siemens_esn		=> undef,
	siemens_imei	=> undef,
	
	# debug
	gdb				=> 0
);

main();

sub main {
	print "Hello, windows user. Why you still use this strange OS?\n" if isWin();
	
	GetOptions(
		"device=s"			=> \$options{device},
		"fullflash=s"		=> \$options{fullflash},
		"rw"				=> \$options{rw},
		"help"				=> \$options{help},
		"flash-otp0=s"		=> \$options{flash_otp0},
		"flash-otp1=s"		=> \$options{flash_otp1},
		"siemens-esn=s"		=> \$options{siemens_esn},
		"siemens-imei=s"	=> \$options{siemens_imei},
		"gdb"				=> \$options{gdb},
	);
	
	# Default emulator ESN
	$options{siemens_esn} = "12345678" if !$options{siemens_esn} && $options{device} =~ /siemens-/i;
	
	help() if $options{help};
	
	my %QEMU_ENV;
	
	# Siemens OTP
	$QEMU_ENV{PMB887X_FLASH_OTP0} = esnToOtp($options{siemens_esn}) if $options{siemens_esn};
	$QEMU_ENV{PMB887X_FLASH_OTP1} = imeiToOtp($options{siemens_imei}) if $options{siemens_imei};
	
	# Raw OTP
	$QEMU_ENV{PMB887X_FLASH_OTP0} = $options{flash_otp0} if $options{flash_otp0};
	$QEMU_ENV{PMB887X_FLASH_OTP1} = $options{flash_otp1} if $options{flash_otp1};
	
	# Board config
	my $cfg = getBoardConfig($options{device});
	die $options{device}.".cfg not found!" if !$cfg;
	$QEMU_ENV{PMB887X_BOARD} = $cfg;
	
	my $qemu = getQemuBin();
	die "QEMU not found!\n" if !$qemu;
	
	my @qemu_args = (
		$qemu,
		"-icount"	=> "precise-clocks=on",
		"-machine"	=> "pmb887x",
		"-drive"	=> "if=pflash,format=raw,file=".$options{fullflash},
		"-monitor"	=> "none",
		"-serial"	=> "unix:/tmp/siemens.sock",
	);
	
	if ($options{gdb}) {
		push @qemu_args, "-S";
		push @qemu_args, "-s";
	}
	
	my $qemu_cmd = join(" ", map { escapeshellarg($_) } @qemu_args);
	
	print "---------------------------------------------------\n";
	for my $k (sort keys %QEMU_ENV) {
		print "set $k=".$QEMU_ENV{$k}."\n";
		$ENV{$k} = $QEMU_ENV{$k};
	}
	
	delete $ENV{GTK_MODULES};
	delete $ENV{GTK2_MODULES};
	delete $ENV{GTK3_MODULES};
	
	print "$qemu_cmd\n";
	print "---------------------------------------------------\n";
	
	system $qemu_cmd;
}

sub help {
	my $help = [
		"$SELF_CMD <options>",
		"",
		"Common options:",
		[
			[" --deivce=siemens-el71",		"Device type."],
			[" --fullflash=ff.bin",			"Path to device fullflash dump."],
			[" --rw",						"Enable rw access to the original fullflash. Dangerous!"],
			[" --help",						"Show this message."]
		],
		"",
		"OTP options:",
		[
			[" --flash-otp0=FFFF",					"Raw NOR flash otp0 value in HEX (with lock bits)."],
			[" --flash-otp1=FFFF",					"Raw NOR flash otp1 value in HEX (with lock bits)."],
			[" --siemens-esn=12345678",				"Siemens OTP ESN (HEX)."],
			[" --siemens-imei=490154203237518",		"Siemens OTP IMEI (number)."],
		],
		"",
		"Debug:",
		[
			[" --gdb",				"Enable GDB server."],
			[" --trace-io=-all",	"CPU IO tracing."],
			[" --trace-log=-all",	"CPU emulation logs."],
		]
	];
	
	my $FIRST_ROW_WIDTH = 36;
	
	for my $msg (@$help) {
		if (ref($msg)) {
			for my $row (@$msg) {
				print $row->[0];
				print (" " x ($FIRST_ROW_WIDTH - length($row->[0])));
				print $row->[1];
				print "\n";
			}
		} else {
			print $msg."\n";
		}
	}
	exit(0);
}

sub imeiToOtp {
	my ($imei) = @_;
	
	die "Invalid IMEI: $imei\n" if length($imei) != 15;
	
	my $otp_imei = "";
	for (my $i = 0; $i < length($imei) - 1; $i += 2) {
		my $a = substr($imei, $i, 1);
		my $b = substr($imei, $i + 1, 1);
		$otp_imei .= $b.$a;
	}
	
	return "0002".$otp_imei."FF";
}

sub esnToOtp {
	my ($esn) = @_;
	
	die "Invalid ESN: $esn\n" if length($esn) != 8;
	
	my @ESN_KEY = (0x32, 0xE5, 0xF7, 0x03);
	my $otp_esn = "";
	for (my $i = 0; $i < 4; $i++) {
		my $byte = hex(substr($esn, (3 - $i) * 2, 2)) ^ $ESN_KEY[$i];
		$otp_esn .= sprintf("%02X", $byte);
	}
	return "0002".$otp_esn.("00" x 4);
}

sub isWin {
	return $^O =~ /win32/i;
}

sub getBoardConfig {
	my ($device) = @_;
	return $device if $device =~ /\.cfg$/i;
	my @variants = (
		dirname(__FILE__)."/boards/$device.cfg",
		dirname(__FILE__)."/bsp/lib/data/board/$device.cfg",
	);
	my ($config) = grep { -e $_ } @variants;
	return $config;
}

sub getQemuBin {
	my @variants = isWin() ? (
		# win
		dirname(__FILE__)."/bin/qemu-system-arm.exe",
		dirname(__FILE__)."/build/dist-win/bin/qemu-system-arm.exe",
	) : (
		# linux & osx
		dirname(__FILE__)."/bin/qemu-system-arm",
		dirname(__FILE__)."/build/qemu/qemu-system-arm",
		dirname(__FILE__)."/build/dist/bin/qemu-system-arm",
	);
	my ($qemu_bin) = grep { -x $_ } @variants;
	return $qemu_bin;
}

sub escapeshellarg {
	my ($arg) = @_;
	$arg = "$arg";
	return $arg if $arg =~ /^[,.\/\w\d=_-]+$/;
	$arg =~ s/'/'\\''/g;
	return "'$arg'";
}
